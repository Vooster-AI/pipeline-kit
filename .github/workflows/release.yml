name: release

on:
  push:
    tags:
      - "v*.*.*"

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # ==========================================
  # Job 1: Tag Validation
  # ==========================================
  tag-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Validate tag matches Cargo.toml version
        shell: bash
        run: |
          set -euo pipefail
          echo "::group::Tag validation"

          # 1. Verify this is a tag push
          [[ "${GITHUB_REF_TYPE}" == "tag" ]] \
            || { echo "❌ Not a tag push"; exit 1; }

          # 2. Verify tag format (v*.*.*)
          [[ "${GITHUB_REF_NAME}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-alpha|-beta)?$ ]] \
            || { echo "❌ Tag '${GITHUB_REF_NAME}' doesn't match v*.*.* format"; exit 1; }

          # 3. Extract versions
          tag_ver="${GITHUB_REF_NAME#v}"  # Remove 'v' prefix
          cargo_ver="$(grep -m1 '^version' pipeline-kit-rs/Cargo.toml \
                        | sed -E 's/version *= *"([^"]+)".*/\1/')"

          # 4. Compare versions
          [[ "${tag_ver}" == "${cargo_ver}" ]] \
            || { echo "❌ Tag ${tag_ver} ≠ Cargo.toml ${cargo_ver}"; exit 1; }

          echo "✅ Tag and Cargo.toml version match (${tag_ver})"
          echo "::endgroup::"

  # ==========================================
  # Job 2: Build Binaries (6 platforms)
  # ==========================================
  build:
    needs: tag-check
    name: ${{ matrix.platform-name }}
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS
          - runner: macos-13
            target: x86_64-apple-darwin
            platform-name: macos-x64
            binary: pipeline
          - runner: macos-14
            target: aarch64-apple-darwin
            platform-name: macos-arm64
            binary: pipeline

          # Linux (musl for portability)
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-musl
            platform-name: linux-x64
            binary: pipeline

          # Linux ARM64 (cross-compilation from x64)
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-musl
            platform-name: linux-arm64
            binary: pipeline
            cross: true

          # Windows
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            platform-name: windows-x64
            binary: pipeline.exe

          # Windows ARM64 (cross-compilation from x64)
          - runner: windows-latest
            target: aarch64-pc-windows-msvc
            platform-name: windows-arm64
            binary: pipeline.exe
            cross: true

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            pipeline-kit-rs/target/
          key: ${{ matrix.runner }}-${{ matrix.target }}-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Install musl tools (Linux only)
        if: contains(matrix.target, 'musl') && !matrix.cross
        run: sudo apt install -y musl-tools

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu musl-tools
          rustup target add aarch64-unknown-linux-musl

      - name: Build binary (native)
        if: ${{ !matrix.cross }}
        working-directory: pipeline-kit-rs
        run: cargo build --target ${{ matrix.target }} --release --bin pipeline

      - name: Build binary (cross-compile)
        if: matrix.cross
        working-directory: pipeline-kit-rs
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
        run: cargo build --target ${{ matrix.target }} --release --bin pipeline

      - name: Create archive structure
        shell: bash
        run: |
          # Create directory structure that install_native_deps.sh expects
          # Result: pipeline-kit/{binary}
          mkdir -p dist/pipeline-kit
          cp pipeline-kit-rs/target/${{ matrix.target }}/release/${{ matrix.binary }} \
             dist/pipeline-kit/${{ matrix.binary }}

      - name: Create tar.gz archive
        shell: bash
        run: |
          cd dist
          tar -czf pipeline-kit-${{ matrix.platform-name }}.tar.gz pipeline-kit/

      - name: Generate checksum
        shell: bash
        run: |
          cd dist
          if command -v sha256sum &> /dev/null; then
            sha256sum pipeline-kit-${{ matrix.platform-name }}.tar.gz \
              > pipeline-kit-${{ matrix.platform-name }}.tar.gz.sha256
          else
            shasum -a 256 pipeline-kit-${{ matrix.platform-name }}.tar.gz \
              > pipeline-kit-${{ matrix.platform-name }}.tar.gz.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform-name }}
          path: |
            dist/pipeline-kit-${{ matrix.platform-name }}.tar.gz
            dist/pipeline-kit-${{ matrix.platform-name }}.tar.gz.sha256

  # ==========================================
  # Job 3: Create GitHub Release
  # ==========================================
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.RELEASE_TOKEN || github.token }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten artifacts
        run: |
          # Move all files from subdirectories to dist/
          find dist -type f -exec mv {} dist/ \;
          # Remove empty subdirectories
          find dist -type d -empty -delete
          # List final structure
          ls -lh dist/

      - name: Extract version
        id: version
        run: |
          version="${GITHUB_REF_NAME#v}"
          echo "number=${version}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Pipeline Kit v${{ steps.version.outputs.number }}
          tag_name: ${{ github.ref_name }}
          files: dist/*
          token: ${{ secrets.RELEASE_TOKEN || github.token }}
          body: |
            ## Installation

            ```bash
            npm install -g pipeline-kit@${{ steps.version.outputs.number }}
            ```

            ## Platform Binaries

            - macOS (Intel): `pipeline-kit-macos-x64.tar.gz`
            - macOS (Apple Silicon): `pipeline-kit-macos-arm64.tar.gz`
            - Linux (x64): `pipeline-kit-linux-x64.tar.gz`
            - Linux (ARM64): `pipeline-kit-linux-arm64.tar.gz`
            - Windows (x64): `pipeline-kit-windows-x64.tar.gz`
            - Windows (ARM64): `pipeline-kit-windows-arm64.tar.gz`

            Each archive includes a `.sha256` checksum file for verification.

            ## Verification

            Download and verify checksums:
            ```bash
            # Download
            gh release download v${{ steps.version.outputs.number }} \
              --repo ${{ github.repository }} \
              --pattern "pipeline-kit-*.tar.gz*"

            # Verify (Linux/macOS)
            sha256sum -c pipeline-kit-*.tar.gz.sha256

            # Verify (macOS alternative)
            shasum -a 256 -c pipeline-kit-*.tar.gz.sha256
            ```
          prerelease: ${{ contains(steps.version.outputs.number, '-alpha') || contains(steps.version.outputs.number, '-beta') }}

  # ==========================================
  # Job 4: Publish to npm
  # ==========================================
  npm-publish:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v6
        with:
          node-version: 18
          registry-url: "https://registry.npmjs.org"

      - name: Publish to npm
        working-directory: pipeline-kit-cli
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
